# Makefile para API Rust
.PHONY: help dev prod build build-release clean test fmt clippy migrate run-dev run-prod

# Incluir configura√ß√µes dos arquivos (apenas quando necess√°rio)

# Vari√°veis padr√£o (caso os arquivos n√£o existam)
DEV_CONFIG_FILE := env.dev
PROD_CONFIG_FILE := env.prod

# Target padr√£o
help: ## Mostra esta ajuda
	@echo "ü¶Ä Rust API - Comandos Dispon√≠veis:"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2}'
	@echo ""

# Configura√ß√£o de Ambiente
dev: ## üîß Configura vari√°veis para desenvolvimento
	@echo "üîß Configurando ambiente de DESENVOLVIMENTO..."
	@if [ -f $(DEV_CONFIG_FILE) ]; then \
		echo "üìã Carregando configura√ß√µes de $(DEV_CONFIG_FILE)"; \
		cat $(DEV_CONFIG_FILE); \
		echo ""; \
		echo "‚úÖ Para aplicar as vari√°veis, execute:"; \
		echo "   source <(sed 's/^/export /' $(DEV_CONFIG_FILE))"; \
		echo "   # ou"; \
		echo "   set -a && source $(DEV_CONFIG_FILE) && set +a"; \
	else \
		echo "‚ùå Arquivo $(DEV_CONFIG_FILE) n√£o encontrado!"; \
		echo "   Copie env.example para $(DEV_CONFIG_FILE) e ajuste as configura√ß√µes."; \
	fi

prod: ## üöÄ Configura vari√°veis para produ√ß√£o
	@echo "üöÄ Configurando ambiente de PRODU√á√ÉO..."
	@if [ -f $(PROD_CONFIG_FILE) ]; then \
		echo "üìã Carregando configura√ß√µes de $(PROD_CONFIG_FILE)"; \
		cat $(PROD_CONFIG_FILE); \
		echo ""; \
		echo "‚úÖ Para aplicar as vari√°veis, execute:"; \
		echo "   source <(sed 's/^/export /' $(PROD_CONFIG_FILE))"; \
		echo "   # ou"; \
		echo "   set -a && source $(PROD_CONFIG_FILE) && set +a"; \
	else \
		echo "‚ùå Arquivo $(PROD_CONFIG_FILE) n√£o encontrado!"; \
		echo "   Copie env.example para $(PROD_CONFIG_FILE) e ajuste as configura√ß√µes."; \
	fi

# Build Commands
build: ## üî® Compila em modo debug
	@echo "üî® Compilando em modo debug..."
	cargo build

build-release: ## üî® Compila em modo release
	@echo "üî® Compilando em modo release..."
	cargo build --release

# Desenvolvimento
run-dev: ## üîß Carrega vari√°veis de ambiente para desenvolvimento
	@echo "üîß Carregando vari√°veis de ambiente (desenvolvimento)..."
	@if [ -f $(DEV_CONFIG_FILE) ]; then \
		echo "üìã Vari√°veis carregadas de $(DEV_CONFIG_FILE):"; \
		cat $(DEV_CONFIG_FILE); \
		echo ""; \
		echo "‚úÖ Para aplicar as vari√°veis, execute:"; \
		echo "   export \$$(grep -v '^#' $(DEV_CONFIG_FILE) | xargs)"; \
		echo "   # ou"; \
		echo "   source <(sed 's/^/export /' $(DEV_CONFIG_FILE))"; \
	else \
		echo "‚ùå Arquivo $(DEV_CONFIG_FILE) n√£o encontrado!"; \
		exit 1; \
	fi

run-prod: ## üöÄ Carrega vari√°veis de ambiente para produ√ß√£o
	@echo "üöÄ Carregando vari√°veis de ambiente (produ√ß√£o)..."
	@if [ -f $(PROD_CONFIG_FILE) ]; then \
		echo "üìã Vari√°veis carregadas de $(PROD_CONFIG_FILE):"; \
		cat $(PROD_CONFIG_FILE); \
		echo ""; \
		echo "‚úÖ Para aplicar as vari√°veis, execute:"; \
		echo "   export \$$(grep -v '^#' $(PROD_CONFIG_FILE) | xargs)"; \
		echo "   # ou"; \
		echo "   source <(sed 's/^/export /' $(PROD_CONFIG_FILE))"; \
	else \
		echo "‚ùå Arquivo $(PROD_CONFIG_FILE) n√£o encontrado!"; \
		exit 1; \
	fi

# Utilit√°rios
test: ## üß™ Executa todos os testes
	@echo "üß™ Executando testes..."
	cargo test

test-watch: ## üëÄ Executa testes em modo watch
	@echo "üëÄ Executando testes em modo watch..."
	cargo watch -x test

fmt: ## üìê Formata o c√≥digo
	@echo "üìê Formatando c√≥digo..."
	cargo fmt

clippy: ## üîç Executa clippy (linting)
	@echo "üîç Executando clippy..."
	cargo clippy -- -D warnings

check: fmt clippy test ## ‚úÖ Executa fmt, clippy e testes

# Database
migrate: ## üóÑÔ∏è Executa migra√ß√µes do banco
	@echo "üóÑÔ∏è Executando migra√ß√µes..."
	DATABASE_URL=$(DEV_DATABASE_URL) sqlx migrate run

migrate-revert: ## ‚Ü©Ô∏è Reverte √∫ltima migra√ß√£o
	@echo "‚Ü©Ô∏è Revertendo √∫ltima migra√ß√£o..."
	DATABASE_URL=$(DEV_DATABASE_URL) sqlx migrate revert

# Limpeza
clean: ## üßπ Remove arquivos de build
	@echo "üßπ Limpando arquivos de build..."
	cargo clean

clean-all: clean ## üßπ Limpeza completa
	@echo "üßπ Limpeza completa..."
	rm -rf target/
	rm -f Cargo.lock
